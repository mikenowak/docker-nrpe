#!/usr/bin/env python3
#
# Checks the mount table for read-only mounts - these are usually a sign of
# trouble (broken filesystem etc.)
#
# This script is based on the following script originally written in perl
# * check_ro_mounts.pl by Valentin Vidic <vvidic@carnet.hr>
# and is meant to work as a drop-in replacement.
#
import argparse
import re
import sys

def globs_to_re(patterns):
    """Converts shell-like glob patterns to regular expressions."""
    return re.compile("|".join([fnmatch.translate(p) for p in patterns]) if patterns else "a^")

def check_read_only_mounts(mtab, includes, excludes, excluded_types):
    ro_mounts = []
    try:
        with open(mtab, 'r') as mt:
            for line in mt:
                parts = line.strip().split()
                if len(parts) >= 4:
                    device, mount_point, fs_type, options = parts[:4]
                    if 'ro' in options.split(',') and (not includes or re.search(includes, mount_point)) \
                      and not re.search(excludes, mount_point) \
                      and not re.search(excluded_types, fs_type):
                        ro_mounts.append((device, mount_point, fs_type))
    except IOError as exc:
        print(f"UNKNOWN: Cannot open {mtab} - {str(exc)}")
        sys.exit(3) # Unknown

    return ro_mounts

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--mtab", default="/proc/mounts")
    parser.add_argument("--include", default="", help="Include mounts matching this pattern")
    parser.add_argument("--exclude", default="", help="Exclude mounts matching this pattern")
    parser.add_argument("--exclude-type", default="", help="Exclude FS types matching this pattern")
    args = parser.parse_args()

    includes_re = globs_to_re(args.include)
    excludes_re = globs_to_re(args.exclude)
    excluded_types_re = globs_to_re(args.exclude_type)

    ro_mounts = check_read_only_mounts(args.mtab, includes_re, excludes_re, excluded_types_re)

    if ro_mounts:
        print(f"CRITICAL: Read-only file systems detected: {' '.join([f'{mnt[1]} ({mnt[2]})' for mnt in ro_mounts])}")
        sys.exit(2)  # Critical
    else:
        print("OK: No read-only file systems detected.")
        sys.exit(0)  # OK

if __name__ == "__main__":
    main()
